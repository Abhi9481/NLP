#  find Term Frequency and Inverse Document Frequency (TF-IDF)
import nltk
import string
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer

nltk.download('punkt')
nltk.download('stopwords')

documents = [
    "This is the first document.",
    "This document is the second document.",
    "And this is the third one.",
    "Is this the first document?",
]

def preprocess_text(doc):
    tokens = nltk.word_tokenize(doc)
    tokens = [word for word in tokens if word not in string.punctuation]
    tokens = [word.lower() for word in tokens]
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    preprocessed_doc = ' '.join(tokens)
    return preprocessed_doc

preprocessed_documents = [preprocess_text(doc) for doc in documents]

vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(preprocessed_documents)

print(tfidf_matrix.toarray())


#Chart Parsing (CYK Alternative)

import nltk

grammar = nltk.CFG.fromstring("""
    S -> V NP
    V -> 'describe' | 'present'
    NP -> PRP N
    PRP -> 'your'
    N -> 'work'
""")

parser = nltk.ChartParser(grammar)

sent = 'describe your work'.split()

print(list(parser.parse(sent)))
