#p5


#program 5

from collections import defaultdict  

# Define the dataset (reviews)  
reviews = [  
    ("fun, couple, love, love", "comedy"),  
    ("fast, furious, shoot", "action"),  
    ("couple, fly, fast, fun", "comedy"),  
    ("furious, shoot, shoot, fun", "action"),  
    ("fly, fast, shoot, love", "action")  
]  

# Preprocess the reviews into word counts for each class  
class_word_counts = defaultdict(lambda: defaultdict(int))  
class_counts = defaultdict(int)  
vocab = set()  

# Step 1: Preprocess reviews and update word counts  
for review, label in reviews:  
    words = review.split(", ")  
    class_counts[label] += 1  
    for word in words:  
        class_word_counts[label][word] += 1  
        vocab.add(word)  

# Step 2: Vocabulary size  
V = len(vocab)  

# Step 3: Calculate prior probabilities  
prior_comedy = class_counts["comedy"] / sum(class_counts.values())  
prior_action = class_counts["action"] / sum(class_counts.values())  

# Step 4: Apply Add-1 smoothing to calculate likelihoods  
def calc_likelihoods(class_word_counts, class_label):  
    total_words = sum(class_word_counts[class_label].values())  
    likelihoods = {}  
    for word in vocab:  
        likelihoods[word] = (class_word_counts[class_label].get(word, 0) + 1) / (total_words + V)  
    return likelihoods  

likelihood_comedy = calc_likelihoods(class_word_counts, "comedy")  
likelihood_action = calc_likelihoods(class_word_counts, "action")  

# Step 5: Classify a new document using Naive Bayes  
new_document = "fast, couple, shoot, fly"  
new_words = new_document.split(", ")  

posterior_comedy = prior_comedy  
posterior_action = prior_action  

for word in new_words:  
    posterior_comedy *= likelihood_comedy.get(word, 1 / (sum(class_word_counts["comedy"].values()) + V))  
    posterior_action *= likelihood_action.get(word, 1 / (sum(class_word_counts["action"].values()) + V))  

# Step 6: Print results and classify the document  
print(f"Posterior for comedy: {posterior_comedy}")  
print(f"Posterior for action: {posterior_action}")  

if posterior_comedy > posterior_action:  
    print("\nThe most likely class for the document is: Comedy")  
else:  
    print("\nThe most likely class for the document is: Action")
